{"version":3,"sources":["components/Header/Header.js","components/Loader/Loader.js","redux/actions/actions.js","components/Weather/Weather.js","App.js","redux/reducers/rootReducer.js","redux/sagas/sagas.js","index.js"],"names":["Header","className","Loader","loading","value","type","payload","fetchWeather","args","saveWeatherInState","weather","Weather","weatherData","useSelector","state","city","months","condition","days","map","day","key","date","Date","getDate","getMonth","getFullYear","morning","temp","evening","night","connect","dispatch","isLoading","navigator","geolocation","getCurrentPosition","position","coords","lat","latitude","lng","longitude","storagePosition","localStorage","getItem","setItem","JSON","stringify","console","log","source","parse","lastDate","parseInt","now","initialState","workerFetchWeather","watchFetchWeather","fetchWeatherFn","formData","FormData","append","fetch","method","body","then","resp","json","geocoder","call","responseWeather","put","cityName","response","GeoObjectCollection","featureMember","GeoObject","name","toString","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","action","Object","assign","applyMiddleware","run","render","document","querySelector"],"mappings":"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","file":"static/js/main.bcb54178.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css';\n\nconst Header = () => {\n    return(\n        <div className='header__wrapper'>\n            <div className='header'>\n                <div className=\"header__title\">Weather</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport './loader.css';\n\nconst Loader = () => {\n    return(\n        <div className=\"loader\">\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n        </div>\n    );\n};\n\nexport default Loader;","export const loading = value => ({\n    type: 'LOADING',\n    payload: value\n});\n\nexport const fetchWeather = args => ({\n    type: 'FETCH_WEATHER',\n    args\n});\n\nexport const saveWeatherInState = weather => ({\n    type: 'SAVE_WEATHER_TO_STATE',\n    payload: weather\n});\n\nexport const fetchCityName = args => ({\n    type: 'FETCH_CITY_NAME',\n    args\n});\n\nexport const saveCityNameInState = city => ({\n    type: 'SAVE_CITY_NAME_IN_STATE',\n    payload: city\n});","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './weather.css';\n\nconst Weather = () => {\n\n    let weatherData = useSelector(state => state.weather);\n    let city = useSelector(state => state.city);\n\n    let months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n\n    let condition = {\n        'clear': 'ясно',\n        'partly-cloudy': 'малооблачно',\n        'cloudy': 'облачно с прояснениями',\n        'overcast': 'пасмурно',\n        'partly-cloudy-and-light-rain': 'небольшой дождь',\n        'partly-cloudy-and-rain': 'дождь',\n        'overcast-and-rain': 'сильный дождь',\n        'overcast-thunderstorms-with-rain': 'сильный дождь, гроза',\n        'cloudy-and-light-rain': 'небольшой дождь',\n        'overcast-and-light-rain': 'небольшой дождь',\n        'cloudy-and-rain': 'дождь',\n        'overcast-and-wet-snow': 'дождь со снегом',\n        'partly-cloudy-and-light-snow': 'небольшой снег',\n        'partly-cloudy-and-snow': 'снег',\n        'overcast-and-snow': 'снегопад',\n        'cloudy-and-light-snow': 'небольшой снег',\n        'overcast-and-light-snow': 'небольшой снег',\n        'cloudy-and-snow': 'снег'\n    };\n\n    if (!weatherData.days) {\n        return(\n            <div className='weather__alert'>Возникла ошибка!<br /><br />Попробуйте обновить страницу.</div>\n        );\n    }\n\n    return(\n        <div className='weather'>\n            <div className=\"weather__title\">Погода {city ? `${city}` : '' }</div>\n            <div className=\"weather__days\">\n                <div className=\"wth__descr-wrap\">\n                    <div className=\"wth__descr-items\">\n                        <div className=\"wth__descr wth__descr--day\">День</div>\n                        <div className=\"wth__descr wth__descr--night\">Ночь</div>\n                    </div>\n                </div>\n                {\n                    weatherData.days && weatherData.days.map(day => {\n                        return(\n                            <div className=\"wth__day\" key={day.date}>\n\n                                {/* блок с датой */}\n                                <div className=\"wth__col wth__col--date\">\n                                    <div className=\"wth__date\">{new Date(day.date).getDate()}</div>\n                                    <div className=\"wth__meta-date\">\n                                        <div className=\"wth__month\">{months[new Date(day.date).getMonth()]}</div>\n                                        <div className=\"wth__week\">{new Date(day.date).getFullYear()}</div>\n                                    </div>\n                                </div>\n                                {/* / блок с датой */}\n\n\n\n                                {/* иконки для мобильной версии */}\n                                <div className=\"wth__col wth__col--icon\">\n                                    <i className={`wth__icon wth__icon--${day.day.condition}`} />\n                                </div>\n                                {/* иконки для мобильной версии */}\n\n                                {/* колонка с погодой утром */}\n                                <div className=\"wth__col wth__col--morning\">\n                                    <div className=\"wth__time\">Утро</div>\n                                    <div className={`wth__temp wth__temp--${day.morning.condition}`}>{day.morning.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.morning.condition]}</div>\n                                </div>\n                                {/* колонка с погодой утром */}\n\n\n                                {/* колонка с погодой днём */}\n                                <div className=\"wth__col wth__col--day\">\n                                    <div className=\"wth__time\">День</div>\n                                    <div className={`wth__temp wth__temp--${day.day.condition}`}>{day.day.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.day.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой днём*/}\n\n\n                                {/*колонка с погодой вечером*/}\n                                <div className=\"wth__col wth__col--evening\">\n                                    <div className=\"wth__time\">Вечер</div>\n                                    <div className={`wth__temp wth__temp--${day.evening.condition}`}>{day.evening.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.evening.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой вечером*/}\n\n\n                                {/*колонка с погодой ночью*/}\n                                <div className=\"wth__col wth__col--night\">\n                                    <div className=\"wth__time\">Ночь</div>\n                                    <div className={`wth__temp wth__temp--${day.night.condition}`}>{day.night.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.night.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой ночью*/}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Weather;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport './reset.css';\n\n\nimport Header from './components/Header/Header';\nimport Loader from './components/Loader/Loader';\nimport {fetchWeather, loading, saveWeatherInState} from \"./redux/actions/actions\";\nimport Weather from \"./components/Weather/Weather\";\n\n\nfunction App({dispatch}) {\n    const isLoading = useSelector(state => state.loading);\n\n    // Получаем координаты пользователя и записываем их в localStorage\n    navigator.geolocation.getCurrentPosition( position => {\n        let coords = { lat: position.coords.latitude, lng: position.coords.longitude };\n\n        // Проверяем есть ли координаты в localStorage\n        let storagePosition = localStorage.getItem('position');\n\n        // Если координат нет, сохраняем их в localStorage и запрашиваем погоду\n        if (!storagePosition) {\n            localStorage.setItem('position', JSON.stringify(coords));\n            console.log('Новое место');\n            // Запрашиваем погоду\n            dispatch(fetchWeather({ source: 1, coords }));\n            return;\n        }\n\n        // Если координаты есть, проверяем совподают ли они с полученными из navigator\n        storagePosition = JSON.parse(storagePosition);\n\n        if (storagePosition.lat === coords.lat && storagePosition.lng === coords.lng) {\n            console.log('То же место');\n\n            // Проверяем прошли ли 2 часа с момента последнего обновления погоды\n            let lastDate = parseInt(localStorage.getItem('lastWeatherQuery'));\n            let now = Date.now();\n\n            if ( (now - lastDate) > 7200000 ) {\n                dispatch(fetchWeather({ source: 1, coords }));\n                console.log('Нужно обновиться');\n            }\n            else {\n                console.log('Прошло не так много времени');\n            }\n        }\n        // Если получены координаты нового места, запрашиваем погоду\n        else {\n            dispatch(fetchWeather({ source: 1, coords }));\n        }\n\n        // Проверяем есть ли в localStorage погода\n        // Если нет, то запрашиваем, если да то то диспатчим её в стор\n        if (localStorage.getItem('weather')) {\n            // console.log(JSON.parse(localStorage.getItem('weather')));\n            dispatch(saveWeatherInState( JSON.parse(localStorage.getItem('weather')) ));\n        }\n        else {\n            dispatch(fetchWeather({ source: 1, coords }));\n        }\n\n\n\n        dispatch(loading(false));\n\n        // OpenWeather KEY\n        const KEY = '1cc70ab40065531978208c146bd12990';\n\n    } );\n\n    if (isLoading) {\n        return <Loader />\n    }\n\n    return (\n        <div className=\"weather__wrapper\">\n            <Header />\n            <Weather />\n        </div>\n    );\n}\n\nexport default connect()(App);\n","let initialState = {\n    loading: true,\n    weather: {},\n    coords: {\n        lat: 55.18367385864258,\n        lng: 30.20479011535645\n    },\n    city: ''\n};\n\nexport const rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOADING':\n            return Object.assign({}, state, { loading: action.payload });\n        // case 'FETCH_WEATHER':\n        //     return Object.assign({}, state, { weather: action.payload });\n        case 'SAVE_WEATHER_TO_STATE':\n            return Object.assign({}, state, { weather: action.payload });\n        case 'SAVE_CITY_NAME_IN_STATE':\n            return Object.assign({}, state, { city: action.payload });\n        default:\n            return state;\n    }\n};","import { takeEvery, put, call } from 'redux-saga/effects';\nimport { saveWeatherInState, loading, saveCityNameInState } from \"../actions/actions\";\n\n\n// Запрашиваем погоду\nconst fetchWeatherFn = ({args}) => {\n\n    let formData = new FormData();\n    formData.append('coords', JSON.stringify(args.coords));\n\n    return fetch(`http://beta.mikron.by/w${args.source}/`, {\n        method: 'post',\n        body: formData\n    })\n        .then(resp => resp.json());\n};\n\n// Обратное геокодирование для получения названия города\nconst geocoder = ({args}) => {\n    return fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=783836a5-c84b-49f6-a36c-018dfb67e707&geocode=${args.coords.lng},${args.coords.lat}&format=json`)\n        .then(resp => resp.json());\n};\n\nfunction* workerFetchWeather(args) {\n    try {\n        const responseWeather = yield call( () => fetchWeatherFn(args) );\n        yield put(saveWeatherInState(responseWeather));\n\n        const cityName = yield call( () => geocoder(args) );\n        yield put(saveCityNameInState(cityName.response.GeoObjectCollection.featureMember[2].GeoObject.name));\n\n        // Записываем погоду в localStorage\n        localStorage.setItem('weather', JSON.stringify(responseWeather));\n        // Записываем время записи погоды в localStorage\n        localStorage.setItem('lastWeatherQuery', responseWeather.now.toString());\n        yield put(loading(false));\n    }\n    catch (error) {\n        console.log(error);\n        yield put(loading(false));\n    }\n\n}\n\nexport function* watchFetchWeather() {\n    yield takeEvery('FETCH_WEATHER', workerFetchWeather);\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport {watchFetchWeather} from \"./redux/sagas/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(watchFetchWeather);\n\nrender(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.querySelector('.layout')\n);"],"sourceRoot":""}