{"version":3,"sources":["redux/actions/actions.js","components/Header/Header.js","components/Loader/Loader.js","components/Weather/Weather.js","App.js","redux/reducers/rootReducer.js","redux/sagas/sagas.js","index.js"],"names":["loading","value","type","payload","fetchWeather","args","saveWeatherInState","weather","saveCityNameInState","city","triggerSources","choice","Header","dispatch","useDispatch","sourcesOpen","useSelector","state","openSources","source","coords","clickHandler","event","target","closest","changeSource","parseInt","dataset","id","useEffect","document","addEventListener","removeEventListener","className","data-id","Loader","Weather","weatherData","months","condition","days","map","day","key","date","Date","getDate","getMonth","getFullYear","morning","temp","evening","night","connect","isLoading","console","log","navigator","geolocation","getCurrentPosition","position","lat","latitude","lng","longitude","storagePosition","localStorage","getItem","setItem","JSON","stringify","parse","lastDate","now","initialState","workerFetchWeather","watchFetchWeather","fetchWeatherFn","formData","FormData","append","fetch","method","body","then","resp","json","geocoder","call","responseWeather","put","success","cityName","response","GeoObjectCollection","featureMember","GeoObject","name","toString","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","action","Object","assign","applyMiddleware","run","render","querySelector"],"mappings":"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","file":"static/js/main.7e39829b.chunk.js","sourcesContent":["export const loading = value => ({\n    type: 'LOADING',\n    payload: value\n});\n\nexport const fetchWeather = args => ({\n    type: 'FETCH_WEATHER',\n    args\n});\n\nexport const saveWeatherInState = weather => ({\n    type: 'SAVE_WEATHER_TO_STATE',\n    payload: weather\n});\n\nexport const fetchCityName = args => ({\n    type: 'FETCH_CITY_NAME',\n    args\n});\n\nexport const saveCityNameInState = city => ({\n    type: 'SAVE_CITY_NAME_IN_STATE',\n    payload: city\n});\n\nexport const triggerSources = choice => ({\n    type: 'TRIGGER_SOURCES',\n    payload: choice\n});\n\nexport const changeSource = source => ({\n    type: 'CHANGE_SOURCE',\n    payload: source\n});","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './header.css';\nimport {changeSource, fetchWeather, loading, triggerSources} from \"../../redux/actions/actions\";\n\nconst Header = () => {\n\n    const dispatch = useDispatch();\n\n    const sourcesOpen = useSelector(state => state.openSources);\n    const source = useSelector(state => state.source);\n    const coords = useSelector(state => state.coords);\n\n    // Обработчик клика на странице\n    let clickHandler = event => {\n\n        // Клик по точкам (открываем список источников)\n        if (event.target.closest('.header__source-ico')) {\n\n            if (sourcesOpen) {\n                dispatch(triggerSources(false));\n            }\n            else {\n                dispatch(triggerSources(true));\n            }\n        }\n\n        // Клик не на источники, а список источников открыт — закрываем список\n        if (!event.target.closest('.header__source') && sourcesOpen) {\n            dispatch(triggerSources(false));\n        }\n\n        // Выбираем источник получения погоды\n        if (event.target.closest('.header__source-item')) {\n            dispatch(loading(true));\n            dispatch(triggerSources(false));\n            dispatch(changeSource(parseInt(event.target.dataset.id)));\n            dispatch(fetchWeather({ source: parseInt(event.target.dataset.id), coords }));\n        }\n    };\n\n    useEffect( () => {\n        document.addEventListener('click', clickHandler);\n\n        return () => {\n            document.removeEventListener('click', clickHandler);\n        };\n    }, [sourcesOpen, source]);\n\n    return(\n        <div className='header__wrapper'>\n            <div className='header'>\n                <div className=\"header__source\">\n                    <i className=\"header__source-ico\" />\n                    <div className={sourcesOpen ? 'header__source-items header__source-items--select' : 'header__source-items'}>\n                        <div className=\"header__source-item\" data-id='1'>Яндекс</div>\n                        <div className=\"header__source-item\" data-id='2'>OpenWeatherMap</div>\n                    </div>\n                </div>\n                <div className=\"header__title\">Weather</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport './loader.css';\n\nconst Loader = () => {\n    return(\n        <div className=\"loader\">\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n        </div>\n    );\n};\n\nexport default Loader;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './weather.css';\n\nconst Weather = () => {\n\n    let weatherData = useSelector(state => state.weather);\n    let city = useSelector(state => state.city);\n\n    let months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n\n    let condition = {\n        'clear': 'ясно',\n        'partly-cloudy': 'малооблачно',\n        'cloudy': 'облачно с прояснениями',\n        'overcast': 'пасмурно',\n        'partly-cloudy-and-light-rain': 'небольшой дождь',\n        'partly-cloudy-and-rain': 'дождь',\n        'overcast-and-rain': 'сильный дождь',\n        'overcast-thunderstorms-with-rain': 'сильный дождь, гроза',\n        'cloudy-and-light-rain': 'небольшой дождь',\n        'overcast-and-light-rain': 'небольшой дождь',\n        'cloudy-and-rain': 'дождь',\n        'overcast-and-wet-snow': 'дождь со снегом',\n        'partly-cloudy-and-light-snow': 'небольшой снег',\n        'partly-cloudy-and-snow': 'снег',\n        'overcast-and-snow': 'снегопад',\n        'cloudy-and-light-snow': 'небольшой снег',\n        'overcast-and-light-snow': 'небольшой снег',\n        'cloudy-and-snow': 'снег'\n    };\n\n    if (!weatherData.days) {\n        return(\n            <div className='weather__alert'>Возникла ошибка!<br /><br />Попробуйте обновить страницу.</div>\n        );\n    }\n\n    return(\n        <div className='weather'>\n            <div className=\"weather__title\">Погода {city ? `${city}` : '' }</div>\n            <div className=\"weather__days\">\n                <div className=\"wth__descr-wrap\">\n                    <div className=\"wth__descr-items\">\n                        <div className=\"wth__descr wth__descr--day\">День</div>\n                        <div className=\"wth__descr wth__descr--night\">Ночь</div>\n                    </div>\n                </div>\n                {\n                    weatherData.days && weatherData.days.map(day => {\n                        return(\n                            <div className=\"wth__day\" key={day.date}>\n\n                                {/* блок с датой */}\n                                <div className=\"wth__col wth__col--date\">\n                                    <div className=\"wth__date\">{new Date(day.date).getDate()}</div>\n                                    <div className=\"wth__meta-date\">\n                                        <div className=\"wth__month\">{months[new Date(day.date).getMonth()]}</div>\n                                        <div className=\"wth__week\">{new Date(day.date).getFullYear()}</div>\n                                    </div>\n                                </div>\n                                {/* / блок с датой */}\n\n\n\n                                {/* иконки для мобильной версии */}\n                                <div className=\"wth__col wth__col--icon\">\n                                    <i className={`wth__icon wth__icon--${day.day.condition}`} />\n                                </div>\n                                {/* иконки для мобильной версии */}\n\n                                {/* колонка с погодой утром */}\n                                <div className=\"wth__col wth__col--morning\">\n                                    <div className=\"wth__time\">Утро</div>\n                                    <div className={`wth__temp wth__temp--${day.morning.condition}`}>{day.morning.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.morning.condition]}</div>\n                                </div>\n                                {/* колонка с погодой утром */}\n\n\n                                {/* колонка с погодой днём */}\n                                <div className=\"wth__col wth__col--day\">\n                                    <div className=\"wth__time\">День</div>\n                                    <div className={`wth__temp wth__temp--${day.day.condition}`}>{day.day.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.day.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой днём*/}\n\n\n                                {/*колонка с погодой вечером*/}\n                                <div className=\"wth__col wth__col--evening\">\n                                    <div className=\"wth__time\">Вечер</div>\n                                    <div className={`wth__temp wth__temp--${day.evening.condition}`}>{day.evening.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.evening.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой вечером*/}\n\n\n                                {/*колонка с погодой ночью*/}\n                                <div className=\"wth__col wth__col--night\">\n                                    <div className=\"wth__time\">Ночь</div>\n                                    <div className={`wth__temp wth__temp--${day.night.condition}`}>{day.night.temp}</div>\n                                    <div className=\"wth__text-descr\">{condition[day.night.condition]}</div>\n                                </div>\n                                {/*/ колонка с погодой ночью*/}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Weather;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport './reset.css';\n\n\nimport Header from './components/Header/Header';\nimport Loader from './components/Loader/Loader';\nimport { fetchWeather, loading, saveCityNameInState, saveWeatherInState } from \"./redux/actions/actions\";\nimport Weather from \"./components/Weather/Weather\";\n\n\nfunction App({dispatch}) {\n    const isLoading = useSelector(state => state.loading); console.log(isLoading);\n    const source = useSelector(state => state.source);\n\n    // Получаем координаты пользователя и записываем их в localStorage\n    navigator.geolocation.getCurrentPosition( position => {\n        let coords = { lat: position.coords.latitude, lng: position.coords.longitude };\n\n        // Проверяем есть ли координаты в localStorage\n        let storagePosition = localStorage.getItem('position');\n\n        // Если координат нет, сохраняем их в localStorage и запрашиваем погоду\n        if (!storagePosition) {\n            localStorage.setItem('position', JSON.stringify(coords));\n            console.log('Новое место');\n            // Запрашиваем погоду\n            dispatch(fetchWeather({ source, coords }));\n            return;\n        }\n\n        // Если координаты есть, проверяем совподают ли они с полученными из navigator\n        storagePosition = JSON.parse(storagePosition);\n\n        if (storagePosition.lat === coords.lat && storagePosition.lng === coords.lng) {\n            console.log('То же место');\n\n            // Проверяем прошли ли 2 часа с момента последнего обновления погоды\n            let lastDate = parseInt(localStorage.getItem('lastWeatherQuery'));\n            let now = Date.now();\n\n            if ( (now - lastDate) > 7200000 ) {\n                dispatch(fetchWeather({ source, coords }));\n                console.log('Нужно обновиться');\n            }\n            else {\n                console.log('Прошло не так много времени');\n                dispatch(loading(false));\n                if (localStorage.getItem('cityName')) {\n                    dispatch(saveCityNameInState(localStorage.getItem('cityName')));\n                }\n            }\n        }\n        // Если получены координаты нового места, запрашиваем погоду\n        else {\n            dispatch(fetchWeather({ source, coords }));\n        }\n\n        // Проверяем есть ли в localStorage погода\n        // Если нет, то запрашиваем, если да то то диспатчим её в стор\n        if (localStorage.getItem('weather')) {\n            // console.log(JSON.parse(localStorage.getItem('weather')));\n            dispatch(saveWeatherInState( JSON.parse(localStorage.getItem('weather')) ));\n        }\n        else {\n            dispatch(fetchWeather({ source, coords }));\n        }\n\n    } );\n\n    if (isLoading) {\n        return <Loader />\n    }\n\n    return (\n        <div className=\"weather__wrapper\">\n            <Header />\n            <Weather />\n        </div>\n    );\n}\n\nexport default connect()(App);\n","let initialState = {\n    loading: true,\n    weather: {},\n    coords: {\n        lat: 55.18367385864258,\n        lng: 30.20479011535645\n    },\n    city: '',\n    openSources: false,\n    source: 1\n};\n\nexport const rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOADING':\n            return Object.assign({}, state, { loading: action.payload });\n        case 'SAVE_WEATHER_TO_STATE':\n            return Object.assign({}, state, { weather: action.payload });\n        case 'SAVE_CITY_NAME_IN_STATE':\n            return Object.assign({}, state, { city: action.payload });\n        case 'TRIGGER_SOURCES':\n            return Object.assign({}, state, { openSources: action.payload });\n        case 'CHANGE_SOURCE':\n            return Object.assign({}, state, { source: action.payload });\n        default:\n            return state;\n    }\n};","import { takeEvery, put, call } from 'redux-saga/effects';\nimport { saveWeatherInState, loading, saveCityNameInState } from \"../actions/actions\";\n\n\n// Запрашиваем погоду\nconst fetchWeatherFn = ({args}) => {\n\n    let formData = new FormData();\n    formData.append('coords', JSON.stringify(args.coords));\n\n    return fetch(`http://beta.mikron.by/w${args.source}/`, {\n        method: 'post',\n        body: formData\n    })\n        .then(resp => resp.json());\n};\n\n// Обратное геокодирование для получения названия города\nconst geocoder = ({args}) => {\n    return fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=783836a5-c84b-49f6-a36c-018dfb67e707&geocode=${args.coords.lng},${args.coords.lat}&format=json`)\n        .then(resp => resp.json());\n};\n\nfunction* workerFetchWeather(args) {\n    try {\n        const responseWeather = yield call( () => fetchWeatherFn(args) );\n        yield put(saveWeatherInState(responseWeather));\n\n        if (responseWeather.success) {\n            const cityName = yield call( () => geocoder(args) );\n            const city = cityName.response.GeoObjectCollection.featureMember[2].GeoObject.name;\n            yield put(saveCityNameInState(city));\n\n            // Записываем название города в localStorage\n            localStorage.setItem('cityName', city);\n            // Записываем погоду в localStorage\n            localStorage.setItem('weather', JSON.stringify(responseWeather));\n            // Записываем время записи погоды в localStorage\n            localStorage.setItem('lastWeatherQuery', responseWeather.now.toString());\n        }\n\n        yield put(loading(false));\n    }\n    catch (error) {\n        console.log(error);\n        yield put(loading(false));\n    }\n\n}\n\nexport function* watchFetchWeather() {\n    yield takeEvery('FETCH_WEATHER', workerFetchWeather);\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport {watchFetchWeather} from \"./redux/sagas/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(watchFetchWeather);\n\nrender(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.querySelector('.layout')\n);"],"sourceRoot":""}